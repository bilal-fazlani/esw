pipeline {
    agent {
        label 'master'
    }

    options {
        timeout(time: 2, unit: 'HOURS')
        timestamps()
    }

    stages {
        stage('Checkout') {
            steps {
                sh "git checkout $VERSION"
                sh "git pull origin $VERSION"
            }
        }

        stage('Build') {
            steps {
                // sh "cs update cs"
                // sh "cs version"
                // sh "echo $HOME"
                // sh "echo $PATH"
                // sh "which cs"
                // sh "cs java --jvm temurin:1.21.0 --setup"
                // sh "java -version"
                sh "eval \$(cs java --jvm temurin:1.21.0 --env) && java -version"
                sh "./scripts/install_kotlin.sh"
                // sh "kotlin -version"
                sh "eval \$(cs java --jvm temurin:1.21.0 --env) && sbt scalafmtCheck"
                sh "eval \$(cs java --jvm temurin:1.21.0 --env) && sbt -Dsbt.log.noformat=true clean makeSite"
                sh "eval \$(cs java --jvm temurin:1.21.0 --env) && sbt -Dsbt.log.noformat=true -DenableFatalWarnings=false ';set every Seq(scalafmtOnCompile := false); test:compile; multi-jvm:compile;'"
                sh "eval \$(cs java --jvm temurin:1.21.0 --env) && sbt -Dsbt.log.noformat=true publishLocal"
            }
        }

        stage('Test') {

            steps {
                sh "eval \$(cs java --jvm temurin:1.21.0 --env) && source /var/lib/jenkins/.sdkman/bin/sdkman-init.sh && sbt -Dsbt.log.noformat=true -Dpekko.actor.serialize-messages=on -DenableCoverage=true -DgenerateStoryReport=true test:test"
            }

            post {
                always {
                    sh "eval \$(cs java --jvm temurin:1.21.0 --env) && sbt -Dsbt.log.noformat=true -DenableCoverage=true coverageReport"
                    sh "eval \$(cs java --jvm temurin:1.21.0 --env) && sbt -Dsbt.log.noformat=true coverageAggregate"
                    junit testResults: '**/target/test-reports/*.xml', allowEmptyResults: true
                    publishHTML(target: [
                            allowMissing         : true,
                            alwaysLinkToLastBuild: false,
                            keepAll              : true,
                            reportDir            : './target/scala-3.6.4/scoverage-report',
                            reportFiles          : 'index.html',
                            reportName           : "Scoverage Report"
                    ])

                    // Generate RTM
                    sh "cs launch --channel https://raw.githubusercontent.com/tmtsoftware/osw-apps/master/apps.json rtm:d45709a -- target/RTM/testStoryMapping.txt tools/RTM/storyRequirementMapping.csv target/RTM/testRequirementsMapping.txt"
                    // Upload RTM
                    publishHTML(target: [
                        alwaysLinkToLastBuild: false,
                        keepAll              : true,
                        reportDir            : './target/RTM/',
                        reportFiles          : 'index.html',
                        reportName           : "Test-Story-Requirement mapping"
                    ])
                }
            }
        }

        stage('Multi-Jvm Test') {
            steps {
              sh "eval \$(cs java --jvm temurin:1.21.0 --env) && sbt -Dsbt.log.noformat=true -DgenerateStoryReport=true esw-integration-test/multi-jvm:test"
            }
        }
    }

    post {
        always {
            script {
                sendNotification(currentBuild.result)
            }
        }
    }
}

def sendNotification(String buildStatus = 'STARTED') {
    buildStatus = buildStatus ?: 'SUCCESS'

    def colorCode = '#FF0000'
    def subject = "${buildStatus}: Job '${env.JOB_NAME}' [${VERSION}] [${env.BUILD_NUMBER}]"
    def summary = "${subject} (${env.BUILD_URL})"

    // override default values based on build status
    if (buildStatus == 'STARTED') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    } else if (buildStatus == 'SUCCESS') {
        color = 'GREEN'
        colorCode = '#00FF00'
    } else {
        color = 'RED'
        colorCode = '#FF0000'
    }
    slackSend(channel: "#${SLACK_CH}", color: colorCode, message: summary)
}
